package com.together.data.entity.base;

import java.text.SimpleDateFormat;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.MappedSuperclass;

import org.json.simple.JSONValue;
@MappedSuperclass
@Inheritance
public class BaseEntity {
    
    /** 
     * each Entity has a Name and an ID
     */
    private @Id @GeneratedValue(strategy = GenerationType.AUTO) Long id;
     

    private final static DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");

    /**
     * Save all attributes in a Map, then generic function like getMap(), toJson(), fromJson() are possible
     */
    private Map<String,Object> attributes = new HashMap<>();
    
    public BaseEntity( String name ) {
        attributes.put("name", name);
        setDateCreation( LocalDateTime.now());
        // for the moment
        id = System.currentTimeMillis();
    }
    public BaseEntity() {
        
    }
    /*
     * Call only on simulation
     */
    public void setId( long id) {
       this.id = id;
    }

    /* -------------------------------------------------------------------- */
    /*                                                                      */
    /* Attributes management */
    /*                                                                      */
    /* -------------------------------------------------------------------- */
    public void set(String attributName, Object value) {
        attributes.put( attributName, value );
        setDateModification( LocalDateTime.now());
    }
    /**
     * if attribute is a string, this method must be choose
     * @param attributName
     * @param value
     * @param length
     */
    public void set(String attributName, String value, int length) {
        if (value!=null && value.length()>length)
            value= value.substring(0,length);
        attributes.put( attributName, value );
        setDateModification( LocalDateTime.now());
    }
  
    public Object get(String attributName) {
        return attributes.get( attributName);
    }
    public String getString( String attributName) {
        return (String) get(attributName);
    }
    public Long getLong( String attributName) {
        return (Long) get(attributName);
    }
    public LocalDateTime getDate( String attributName) {
        return (LocalDateTime) get(attributName);
    }
    
    
    /* -------------------------------------------------------------------- */
    /*                                                                      */
    /* Basic attribut */
    /*                                                                      */
    /* -------------------------------------------------------------------- */

    @Column(name="NAME", length=50)
    public String getName() {
        return getString("name");
    }
    public void setName(String name ) {
        set("name", name, 50);
    }
    /**
     * Date of creation in UTC. Then, the date is translated in the current time zone of the observer.
     * @return
     */
    @Column(name="DATECREATION", nullable = false)    
    public LocalDateTime getDateCreation() {
        return getDate("datecreation");
    }
    public void setDateCreation(LocalDateTime dateCreation ) {
        set("datecreation", dateCreation);
    }
    @Column(name="DATEMODIFICATION", nullable = false)    
    public LocalDateTime getDateModification() {
        return getDate("datemodification");
    }
    /**
     * Note : any set() call change the dateModification to the current date.
     * @param dateModification
     */
    public void setDateModification(LocalDateTime dateModification ) {
        // do not call the set() method : it will override the date
        attributes.put("datemodification", dateModification);
     }

    /**
     * when the object is saved, it will have an unique Id
     * @return
     */
    public Long getId() {
        return id;
    }

    
    /* -------------------------------------------------------------------- */
    /*                                                                      */
    /* Main tool on attribute */
    /*                                                                      */
    /* -------------------------------------------------------------------- */
    public Map<String,Object> getMap() {
        return attributes;
    }
 
    @SuppressWarnings("unchecked")
    public void setJson(String jsonSt) {
        attributes= (Map<String, Object>) JSONValue.parse( jsonSt );
    }
    
    public Map<String,Object> getMapForJson() {
        // Attention, we have to manage the DATE attribut !
        Map<String,Object> resultMap = new HashMap<>();
        for (Entry<String, Object> entry : attributes.entrySet())
        {
            if (entry.getValue() instanceof String || entry.getValue() instanceof Long || entry.getValue() instanceof Integer)
                resultMap.put( entry.getKey(), entry.getValue());
            else if (entry.getValue() instanceof LocalDateTime)
                resultMap.put( entry.getKey(), ((LocalDateTime)entry.getValue()).format(dateFormatter));
            else 
                resultMap.put( entry.getKey(), entry.getValue());
        }
        resultMap.put( "id", id);
        return resultMap;
    }
    
    /**
     * 
     * @param listBaseEntity
     * @return
     */
    public static List<Map<String,Object>> getListForJson( List<?> listBaseEntity  ) {
        List<Map<String,Object>> jsonList= new ArrayList<>();
        if (listBaseEntity!=null) {
        for (Object entity  : listBaseEntity) {
            jsonList.add( ((BaseEntity)entity).getMapForJson());
        }
        }
        return jsonList;
    }
    


}
